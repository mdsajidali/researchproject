apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-state-metrics
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata: { name: kube-state-metrics }
rules:
  - apiGroups: [""]
    resources: ["pods","nodes","services","namespaces","configmaps","secrets","persistentvolumes","persistentvolumeclaims","resourcequotas","replicationcontrollers"]
    verbs: ["list","watch"]
  - apiGroups: ["apps"]
    resources: ["deployments","daemonsets","statefulsets","replicasets"]
    verbs: ["list","watch"]
  - apiGroups: ["batch"]
    resources: ["cronjobs","jobs"]
    verbs: ["list","watch"]
  - apiGroups: ["autoscaling"]
    resources: ["horizontalpodautoscalers"]
    verbs: ["list","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata: { name: kube-state-metrics }
roleRef: { apiGroup: rbac.authorization.k8s.io, kind: ClusterRole, name: kube-state-metrics }
subjects: [ { kind: ServiceAccount, name: kube-state-metrics, namespace: monitoring } ]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-state-metrics
  namespace: monitoring
spec:
  replicas: 1
  selector: { matchLabels: { app: kube-state-metrics } }
  template:
    metadata: { labels: { app: kube-state-metrics } }
    spec:
      serviceAccountName: kube-state-metrics
      containers:
        - name: ksm
          image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.13.0
          ports: [ { name: http, containerPort: 8080 } ]
---
apiVersion: v1
kind: Service
metadata:
  name: kube-state-metrics
  namespace: monitoring
spec:
  selector: { app: kube-state-metrics }
  ports: [ { name: http, port: 8080, targetPort: http } ]
