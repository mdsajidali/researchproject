apiVersion: apps/v1
kind: Deployment
metadata: { name: expense-web, namespace: expense }
spec:
  replicas: 2
  selector: { matchLabels: { app: expense-web } }
  template:
    metadata: { labels: { app: expense-web } }
    spec:
      containers:
      - name: web
        image: <dockerhub-username>/expense-tracker:1.0
        env:
        - name: DEBUG           ; value: "False"
        - name: SECRET_KEY      ; value: "prod-secret-change-me"
        - name: ALLOWED_HOSTS   ; value: "localhost,127.0.0.1"
        - name: DB_NAME         ; valueFrom: { secretKeyRef: { name: db-secret, key: POSTGRES_DB } }
        - name: DB_USER         ; valueFrom: { secretKeyRef: { name: db-secret, key: POSTGRES_USER } }
        - name: DB_PASSWORD     ; valueFrom: { secretKeyRef: { name: db-secret, key: POSTGRES_PASSWORD } }
        - name: DB_HOST         ; value: "postgres"
        - name: DB_PORT         ; value: "5432"
        ports: [{ containerPort: 8000, name: http }]
        readinessProbe:
          httpGet: { path: "/", port: http }
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet: { path: "/", port: http }
          initialDelaySeconds: 30
          periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata: { name: expense-web, namespace: expense }
spec:
  selector: { app: expense-web }
  ports: [{ port: 8000, targetPort: 8000 }]
  type: LoadBalancer   # on k3s this becomes a NodePort via Klipper LB
